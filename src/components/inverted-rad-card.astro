---
interface Props {
	radius?: number;
	innerRadius?: number;
	width?: string;
	height?: string;
	ctaWidth?: string;
	ctaHeight?: string;
	// adjust the height and width of the button component manually
	offsetX?: number;
	offsetY?: number;
	// hover effect
	tiltEffect?: boolean;
	glare?: boolean;
}

const {
	radius = 20,
	innerRadius = 30,
	width = '100%',
	height = 'auto',
	ctaWidth = 'auto',
	ctaHeight = 'auto',
	offsetX = 20,
	offsetY = 10,
	tiltEffect = false,
	glare = false,
} = Astro.props;
---

<script>
	import { gsap } from 'gsap';
	const $cards = document.querySelectorAll(
		'.card-inverted-radius'
	) as NodeListOf<HTMLElement>;

	$cards.forEach(($card) => {
		let bounds: DOMRect;
		let lastShadowOffsetX = 0;
		let lastShadowOffsetY = 0;
		let lastShadowBlur = 0;

		function moveToMouse(e: MouseEvent) {
			const mouseX = e.clientX;
			const mouseY = e.clientY;
			const leftX = mouseX - bounds.x;
			const topY = mouseY - bounds.y;
			const center = {
				x: leftX - bounds.width / 2,
				y: topY - bounds.height / 2,
			};

			const distance = Math.sqrt(center.x ** 2 + center.y ** 2);

			const rotationX = -center.y / 50;
			const rotationY = center.x / 50;

			const shadowOffsetX = -rotationY * 5;
			const shadowOffsetY = rotationX * 5;
			const shadowBlur = 20 + distance / 120;
			console.log(shadowBlur);

			lastShadowOffsetX = shadowOffsetX;
			lastShadowOffsetY = shadowOffsetY;
			lastShadowBlur = shadowBlur;

			$card.dataset.tilteffect === 'true' &&
				gsap.to($card, {
					scale: 1,
					rotationX: rotationX,
					rotationY: rotationY,
					transformPerspective: 500,
					ease: 'power2.out',
				});

			$card.dataset.glare === 'true' &&
				gsap.to($card.querySelector('.glare'), {
					autoAlpha: 0.3,
					backgroundImage: `
				radial-gradient(
					circle at
					${center.x * 2 + bounds.width / 2}px
					${center.y * 2 + bounds.height / 2}px, rgba(255, 255, 255, 0.33), rgba(0, 0, 0, 0.06)
				)
				`,
				});
		}

		$card.addEventListener('mouseenter', () => {
			bounds = $card.getBoundingClientRect();
			document.addEventListener('mousemove', moveToMouse);
			$card.dataset.tilteffect === 'true' &&
				gsap.to($card, {
					scale: 1,
					rotationX: 0,
					rotationY: 0,
					duration: 0.6,
				});
		});

		$card.addEventListener('mouseleave', () => {
			document.removeEventListener('mousemove', moveToMouse);

			$card.dataset.tilteffect === 'true' &&
				gsap.to($card, {
					scale: 1,
					rotationX: 0,
					rotationY: 0,
					duration: 0.6,
					ease: 'power2.out',
				});

			$card.dataset.tilteffect === 'true' &&
				gsap.to($card, {
					duration: 0.3,
					ease: 'power3.out',
					onComplete: () => {
						gsap.to($card, {
							boxShadow: `0px 0px ${lastShadowBlur}px 0 rgba(0, 0, 0, 0)`,
							duration: 1.2,
						});
					},
				});

			$card.dataset.glare === 'true' &&
				gsap.to($card.querySelector('.glare'), {
					autoAlpha: 0,
					duration: 0.6,
				});
		});
	});
</script>

<div class='relative'>
	<div
		class='card-inverted-radius'
		style={`
        --r: ${radius}px;
        --s: ${innerRadius}px;
        --x: ${offsetX}px;
        --y: ${offsetY}px;
        width: ${width};
        height: ${height};
    `}
		data-glare={glare}
		data-tilteffect={tiltEffect}>
		<div class='glare absolute h-full left-0 top-0 w-full'></div>
		<slot />
	</div>

	<!-- Use slot='cta-content' attribute for a component that should placed be in the bottom-right -->
	<div
		class='text-white font-bold bottom-0 right-0 flex justify-center items-center gap-2 md:absolute'
		style={`
				width: ${ctaWidth};
        height: ${ctaHeight};
			`}>
		<slot name='cta-content' />
	</div>
</div>

<style>
	.card-inverted-radius {
		border-radius: var(--r);
		--_m: /calc(2 * var(--r)) calc(2 * var(--r)) radial-gradient(#000 70%, #0000
					72%);
		--_g: conic-gradient(
			from 90deg at calc(100% - var(--r)) calc(100% - var(--r)),
			#0000 25%,
			#000 0
		);
		--_d: (var(--s) + var(--r));
		mask:
			calc(100% - var(--_d) - var(--x)) 100% var(--_m),
			100% calc(100% - var(--_d) - var(--y)) var(--_m),
			radial-gradient(var(--s) at 100% 100%, #0000 99%, #000 calc(100% + 1px))
				calc(-1 * var(--r) - var(--x)) calc(-1 * var(--r) - var(--y)),
			var(--_g) calc(-1 * var(--_d) - var(--x)) 0,
			var(--_g) 0 calc(-1 * var(--_d) - var(--y));
		mask-repeat: no-repeat;
	}
</style>
