---
interface Props {
	radius?: number;
	innerRadius?: number;
	width?: string;
	height?: string;
	ctaWidth?: string;
	ctaHeight?: string;
	// adjust the height and width of the button component manually
	offsetX?: number;
	offsetY?: number;
}

const {
	radius = 20,
	innerRadius = 30,
	width = '100%',
	height = 'auto',
	ctaWidth = 'auto',
	ctaHeight = 'auto',
	offsetX = 20,
	offsetY = 10,
} = Astro.props;
---

<div class='relative'>
	<div
		id='card-inverted-radius'
		style={`
        --r: ${radius}px;
        --s: ${innerRadius}px;
        --x: ${offsetX}px;
        --y: ${offsetY}px;
        width: ${width};
        height: ${height};
    `}>
		<slot />
	</div>

	<!-- Use slot='cta-content' attribute for a component that should be in the bottom-right -->
	<div
		class='text-white font-bold bottom-0 right-0 flex justify-center items-center gap-2 md:absolute'
		style={`
				width: ${ctaWidth};
        height: ${ctaHeight};
			`}>
		<slot name='cta-content' />
	</div>
</div>

<style>
	#card-inverted-radius {
		border-radius: var(--r);
		--_m: /calc(2 * var(--r)) calc(2 * var(--r)) radial-gradient(#000 70%, #0000
					72%);
		--_g: conic-gradient(
			from 90deg at calc(100% - var(--r)) calc(100% - var(--r)),
			#0000 25%,
			#000 0
		);
		--_d: (var(--s) + var(--r));
		mask:
			calc(100% - var(--_d) - var(--x)) 100% var(--_m),
			100% calc(100% - var(--_d) - var(--y)) var(--_m),
			radial-gradient(var(--s) at 100% 100%, #0000 99%, #000 calc(100% + 1px))
				calc(-1 * var(--r) - var(--x)) calc(-1 * var(--r) - var(--y)),
			var(--_g) calc(-1 * var(--_d) - var(--x)) 0,
			var(--_g) 0 calc(-1 * var(--_d) - var(--y));
		mask-repeat: no-repeat;
	}
</style>
