---
import FormContainer from '@components/form-container.astro';
import InvertedRadCard from '@components/inverted-rad-card.astro';
import BaseLayout from '@layouts/base-layout.astro';
import Hero from '@modules/services/sections/hero.astro';
import OurTeam from '@modules/services/sections/our-team.astro';
import { Icon } from 'astro-icon/components';
import { cnb } from 'cnbuilder';

const services = [
	{
		title: 'Strategy and Design',
		points: ['Logo Design', 'Branding', 'Web Design', 'Mobile App Design'],
		link: '/services/strategy-and-design',
	},
	{
		title: 'Coding and Implementation',
		points: [
			'Website Development',
			'Web Application Development',
			'Mobile App Development',
			'E-Commerce',
		],
		link: '/services/coding-and-implementation',
	},
	{
		title: 'Growth and Marketing',
		points: [
			'SEO',
			'Social Media Marketing',
			'Email Marketing',
			'Performance Marketing',
		],
		link: '/services/growth-and-marketing',
	},
];
---

<script>
	import { gsap } from 'gsap';
	import { ScrollTrigger } from 'gsap/ScrollTrigger';
	gsap.registerPlugin(ScrollTrigger);

	let panels = gsap.utils.toArray<HTMLElement>('#card');
	// we'll create a ScrollTrigger for each panel just to track when each panel's top hits the top of the viewport (we only need this for snapping)
	let tops = panels.map((panel) =>
		ScrollTrigger.create({ trigger: panel, start: 'top top' })
	);
	panels.forEach((panel, i) => {
		ScrollTrigger.create({
			trigger: panel,
			start: () =>
				panel.offsetHeight < window.innerHeight ? 'top top' : 'bottom bottom', // if it's shorter than the viewport, we prefer to pin it at the top
			pin: true,
			pinSpacing: false,
		});
	});

	let serviceInfo = gsap.utils.toArray<HTMLElement>('#service-info');

	serviceInfo.forEach((info) => {
		gsap.from(info, {
			scrollTrigger: {
				trigger: info,
				start: 'top 60%',
				end: 'bottom 60%',
			},
			duration: 1.3,
			opacity: 0,
			ease: 'power3.out',
			stagger: 0.05,
			x: -300,
		});
	});
</script>

<BaseLayout>
	<section class='bg-primary'>
		<!-- Each one of these components has id of "card" -->
		<Hero />
		<OurTeam />

		{
			services.map(({ title, points, link }, index) => (
				<section
					id='card'
					class={cnb(
						index % 2 !== 0 ? 'bg-secondary' : 'bg-primary',
						'min-h-auto -mt-16 pb-[100px] relative rounded-se-[60px] rounded-ss-[60px] lg:rounded-se-[100px] lg:rounded-ss-[100px]'
					)}>
					<div class='mx-auto px-5 py-[100px] md:px-[120px] md:py-[100px] lg:py-[160px]'>
						<div class='flex flex-col-reverse gap-8 lg:flex-row'>
							<div class='flex-1 relative z-20 md:px-20 lg:max-w-[300px] lg:min-w-[300px] lg:px-0 xl:max-w-[403px] xl:min-w-[403px]'>
								<InvertedRadCard
									tiltEffect
									glare
									glareIntensity={1}
									ctaHeight='40px'
									ctaWidth='60px'
									mdCtaHeight='60px'
									mdCtaWidth='80px'
									innerRadius={24}
									mdInnerRadius={36}
									offsetX={10}
									offsetY={0}
									mdOffsetX={20}
									mdOffsetY={10}>
									<div class='bg-[url(/src/assets/images/home/hero-background.png)] bg-cover bg-center min-h-[200px] relative lg:min-h-[343px] xl:min-h-[403px]' />
									<a
										href={link}
										class='bg-white cursor-pointer duration-300 flex h-8 items-center justify-center rounded-full text-black w-8 md:h-10 md:w-10 hover:bg-accent hover:text-white'
										slot='cta-content'>
										<Icon name='arrow-right' />
									</a>
								</InvertedRadCard>
							</div>

							<div
								id='service-info'
								class='place-self-center'>
								<span class='font-bold font-display text-white text-4xl lg:text-[91px]'>
									{(index + 1).toString().padStart(2, '0')}
								</span>

								<h5 class='font-bold font-display text-white text-2xl lg:text-[40px]'>
									{title}
								</h5>

								<ul class='list-disc list-inside mt-6 text-white text-sm lg:mt-10 lg:text-base'>
									{points.map((point) => (
										<li class='text-white'>{point}</li>
									))}
								</ul>
							</div>
						</div>
					</div>
				</section>
			))
		}

		<FormContainer />
	</section>
</BaseLayout>
